{"version":3,"sources":["assets/style/layout.module.scss","views/Home/index.js","views/Component/index.js","views/Event/index.js","views/Lifecircle/index.js","views/Router/index.js","views/Example/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","React","Component","Comview","Event","Lifecircle","Routerview","Example","App","className","LayoutCss","wrapper","nav_box","to","path","exact","component","Componentview","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,QAAU,0B,iNCY/CC,E,YAVb,WAAaC,GAAQ,qEACbA,I,sEAGN,OACE,+C,GANaC,IAAMC,WCWVC,E,YAVb,WAAaH,GAAQ,qEACbA,I,sEAGN,OACE,oD,GANgBC,IAAMC,WCWbE,E,YAVb,WAAaJ,GAAQ,qEACbA,I,sEAGN,OACE,gD,GANcC,IAAMC,WCWXG,E,YAVb,WAAaL,GAAQ,qEACbA,I,sEAGN,OACE,qD,GANmBC,IAAMC,WCWhBI,E,YAVb,WAAaN,GAAQ,qEACbA,I,sEAGN,OACE,iD,GANmBC,IAAMC,WCWhBK,E,YAVb,WAAaP,GAAQ,qEACbA,I,sEAGN,OACE,kD,GANgBC,IAAMC,WCmDbM,E,iLAtCX,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAWC,IAAUC,SACxB,gCACE,wBAAIF,UAAWC,IAAUE,SACvB,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,iBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,kBAAT,iBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,iBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,eAAT,6BAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,eAAT,iBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,mBAIN,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjB,IACjC,kBAAC,IAAD,CAAOe,KAAK,iBAAiBE,UAAWC,IACxC,kBAAC,IAAD,CAAOH,KAAK,SAASE,UAAWZ,IAChC,kBAAC,IAAD,CAAOU,KAAK,cAAcE,UAAWX,IACrC,kBAAC,IAAD,CAAOS,KAAK,cAAcE,UAAWV,IACrC,kBAAC,IAAD,CAAOQ,KAAK,WAAWE,UAAWT,IA5BpC,mB,GAJUN,IAAMC,WCDJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8c61fe2e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"layout_wrapper__1wXB-\",\"nav_box\":\"layout_nav_box__VFMhC\"};","import React from 'react';\n\nclass Home extends React.Component {\n  constructor (props) {\n    super(props);\n  }\n  render () {\n    return (\n      <div>Home page.</div>\n    )\n  }\n}\n\nexport default Home;\n","import React from 'react';\n\nclass Comview extends React.Component {\n  constructor (props) {\n    super(props);\n  }\n  render () {\n    return (\n      <div>Component page.</div>\n    )\n  }\n}\n\nexport default Comview;\n","import React from 'react';\n\nclass Event extends React.Component {\n  constructor (props) {\n    super(props);\n  }\n  render () {\n    return (\n      <div>Event page.</div>\n    )\n  }\n}\n\nexport default Event;\n","import React from 'react';\n\nclass Lifecircle extends React.Component {\n  constructor (props) {\n    super(props);\n  }\n  render () {\n    return (\n      <div>Lifecircle page.</div>\n    )\n  }\n}\n\nexport default Lifecircle;\n","import React from 'react';\n\nclass Routerview extends React.Component {\n  constructor (props) {\n    super(props);\n  }\n  render () {\n    return (\n      <div>Router page.</div>\n    )\n  }\n}\n\nexport default Routerview;\n","import React from 'react';\n\nclass Example extends React.Component {\n  constructor (props) {\n    super(props);\n  }\n  render () {\n    return (\n      <div>Example page.</div>\n    )\n  }\n}\n\nexport default Example;\n","import React from 'react';\n// 局部加载样式表\nimport LayoutCss from '@/assets/style/layout.module.scss';\n// 引入路由文件\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n// 引入页面组件\nimport Home from '@/views/Home';\nimport Componentview from '@/views/Component';\nimport Event from '@/views/Event';\nimport Lifecircle from '@/views/Lifecircle';\nimport Routerview from '@/views/Router';\nimport Example from '@/views/Example';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className={LayoutCss.wrapper}>\n          <header>\n            <ul className={LayoutCss.nav_box}>\n              <li>\n                <Link to=\"/\">概览</Link>\n              </li>\n              <li>\n                <Link to=\"/componentview\">组件</Link>\n              </li>\n              <li>\n                <Link to=\"/event\">事件</Link>\n              </li>\n              <li>\n                <Link to=\"/lifecircle\">生命周期</Link>\n              </li>\n              <li>\n                <Link to=\"/routerview\">路由</Link>\n              </li>\n              <li>\n                <Link to=\"/example\">实例</Link>\n              </li>\n            </ul>\n          </header>\n          <Route path=\"/\" exact component={Home}></Route>\n          <Route path=\"/componentview\" component={Componentview}></Route>\n          <Route path=\"/event\" component={Event}></Route>\n          <Route path=\"/lifecircle\" component={Lifecircle}></Route>\n          <Route path=\"/routerview\" component={Routerview}></Route>\n          <Route path=\"/example\" component={Example}></Route>\n          react app.\n      </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@/assets/style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}